import React, {useState} from 'react'
import './App.css';
import Main from './containers/Main/Main'
import Shop from './containers/Shop/Shop'
import Axios from 'axios'
import {Col, Container, Row} from 'react-bootstrap';

function App() {
  const [shopData, setShopData] = useState("");
  const [error, setError] = useState("Something has gone wrong.");

  const newShop = (level) => {
    setShopData("Loading")
    Axios.get("api/newShop?shopLevel=" + level).then(result => {
      console.log(result.data)
      setShopData(result.data)
    })
  }

  const loadShop = (id) => {
    setShopData("Loading")
    let shopId = id.match(/^[a-z0-9]+$/i)
    if(id.length !== 6 || !shopId) {
      setError("Sorry. We could not find a shop with that ID. Please try again.")
      setShopData("Error")
    } else {
      try {
        Axios.get("api/shopID?id=" + id).then(result => {
          setShopData(result.data)
        })
      } catch(err) {
        if(err.response.status === "404") {
          setError("Sorry. We could not find a shop with that ID. Please try again.")
          setShopData("Error")
        } else {
          console.log(err)
        }
      }
    }
  }

  let table = ""

  if (shopData === "") {
    table = (
      <Col className={"instructions"}>
        <h1>Greetings Adventurer!</h1>
        <p>This is a shop generator created for the <a href={"https://adventureincpod.com/"}>Adventure Incorporated
          Actual Play Podcast</a> and made available to all. It allows for Dungeon Masters to randomly generate an
        assortment of items and share that shop with players, taking the pressure off the DM and letting RNG take
        the wheel.</p>
        <h2>Understanding the Chart</h2>
        <h3>Rarity Indicator</h3>
        <p>At the start of each row you will see a colored dot. The color of the dot tells you what rarity the item is.
        The rarities relate to colors as follows:</p>
        <ul>
          <li>Black - Common</li>
          <li>Green - Uncommon</li>
          <li>Blue - Rare</li>
          <li>Purple - Very Rare</li>
          <li>Gold - Legendary</li>
        </ul>
          <h3>Charges/Doses</h3>
          <p>Charges for magic items and doses for potions are calculated automatically when the shop is generated.
          Items and potions can have between 1 and 5 charges. For magic items that say they have charges in their
          description, we have ignored that and use the generated charges instead for plot reasons.</p>
          <h3>Stones per Charge</h3>
          <p>As part of the setting, we introduced spellstones for recharging magic items. You will see a number of
              spell stones per charge on the chart. This is how many spellstones will have to be consumed to recharge
              the item if a charge is expended. Each rarity has a range associated with it and the number of spellstone
          spellstones pert charge is randomly assigned from that range.</p>
          <ul>
              <li>1 - 3: Common</li>
              <li>2 - 6: Uncommon</li>
              <li>4 - 12: Rare</li>
              <li>8 - 24: Very Rare</li>
              <li>16 - 48: Legendary</li>
          </ul>
          <h3>Gold Cost</h3>
          <p>Gold cost for an item is generated by a number of factors. Largely it is based on rarity, but it is
          modified by discounts, sales, the number of charges or doses, the amount of stones required to recharge it,
          and some good old RNG. The full formula for each item type can be found in the source code.</p>
          <h3>Info Popup</h3>
          <p>Click any row to get information about the item. A lot of information is copyright protected by Wizards
          of the coast. This information will not be visible but the book and page is included.</p>
          <h3>Source Code</h3>
          <p>If you want to see the code for the program or fork it and run it yourself, you can head
              to <a href={"https://github.com/AnthonyGReed/spring-magic-shoppe"}>Github</a> and check out the
              project.</p>
      </Col>
    )
  }

  if (shopData === "Loading") {
    table = "Loading..."
  }

  if (shopData === "Error") {
    table = error
  }

  if (shopData !== "Loading" && shopData !=="Error" && shopData !== "") {
    table = <Shop data={shopData} />
  }

  return (
    <Container fluid className="App">
      <Row className="header">
        <Col><p className={"title"}>Adventure Incorporated Magic Shoppe</p></Col>
        <Main new={newShop} load={loadShop}/>
      </Row>
      <Row>
        {table}
      </Row>
    </Container>
  );
}

export default App;
